; src/EFM8UB1_Blinky.SRC generated from: /Users/clfilho/SimplicityStudio/March20/LEDStrip_UB1/src/EFM8UB1_Blinky.c
; COMPILER INVOKED BY:
;        Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.60\BIN\C51.exe /Users/clfilho/SimplicityStudio/March20/LEDStrip_UB1/src/EFM8UB1_Blinky.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(0) FLOATFUZZY(3) OPTIMIZE(0,SPEED) INTVECTOR(0X0000) BROWSE ORDER INTPROMOTE SRC(src/EFM8UB1_Blinky.SRC) INCDIR(/Users/clfilho/SimplicityStudio/March20/LEDStrip_UB1/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.1.7//Device/EFM8UB1/inc) NOAREGS PREPRINT(.\src/EFM8UB1_Blinky.I) PRINT(.\src/EFM8UB1_Blinky.lst) COND SYMBOLS LISTINCLUDE CODE PAGEWIDTH(120) PAGELENGTH(65)

$NOMOD51

NAME	EFM8UB1_BLINKY

ACC	DATA	0E0H
ADC0AC	DATA	0B3H
ADC0CF	DATA	0BCH
ADC0CN0	DATA	0E8H
ADC0CN1	DATA	0B2H
ADC0GTH	DATA	0C4H
ADC0GTL	DATA	0C3H
ADC0H	DATA	0BEH
ADC0L	DATA	0BDH
ADC0LTH	DATA	0C6H
ADC0LTL	DATA	0C5H
ADC0MX	DATA	0BBH
ADC0PWR	DATA	0DFH
ADC0TK	DATA	0B9H
B	DATA	0F0H
CKCON0	DATA	08EH
CKCON1	DATA	0A6H
CLKSEL	DATA	0A9H
CMP0CN0	DATA	09BH
CMP0CN1	DATA	099H
CMP0MD	DATA	09DH
CMP0MX	DATA	09FH
CMP1CN0	DATA	0BFH
CMP1CN1	DATA	0ACH
CMP1MD	DATA	0ABH
CMP1MX	DATA	0AAH
CRC0CN0	DATA	0CEH
CRC0CN1	DATA	086H
CRC0CNT	DATA	0D3H
CRC0DAT	DATA	0DEH
CRC0FLIP	DATA	0CFH
CRC0IN	DATA	0DDH
CRC0ST	DATA	0D2H
DERIVID	DATA	0ADH
DEVICEID	DATA	0B5H
DPH	DATA	083H
DPL	DATA	082H
EIE1	DATA	0E6H
EIE2	DATA	0CEH
EIP1	DATA	0F3H
EIP1H	DATA	0F5H
EIP2	DATA	0F4H
EIP2H	DATA	0F6H
EMI0CN	DATA	0E7H
FLKEY	DATA	0B7H
HFO0CAL	DATA	0C7H
HFO1CAL	DATA	0D6H
HFOCN	DATA	0EFH
I2C0CN0	DATA	0BAH
I2C0DIN	DATA	0BCH
I2C0DOUT	DATA	0BBH
I2C0FCN0	DATA	0ADH
I2C0FCN1	DATA	0ABH
I2C0FCT	DATA	0F5H
I2C0SLAD	DATA	0BDH
I2C0STAT	DATA	0B9H
IE	DATA	0A8H
IP	DATA	0B8H
IPH	DATA	0F2H
IT01CF	DATA	0E4H
LFO0CN	DATA	0B1H
P0	DATA	080H
P0MASK	DATA	0FEH
P0MAT	DATA	0FDH
P0MDIN	DATA	0F1H
P0MDOUT	DATA	0A4H
P0SKIP	DATA	0D4H
P1	DATA	090H
P1MASK	DATA	0EEH
P1MAT	DATA	0EDH
P1MDIN	DATA	0F2H
P1MDOUT	DATA	0A5H
P1SKIP	DATA	0D5H
P2	DATA	0A0H
P2MASK	DATA	0FCH
P2MAT	DATA	0FBH
P2MDIN	DATA	0F3H
P2MDOUT	DATA	0A6H
P2SKIP	DATA	0CCH
P3	DATA	0B0H
P3MDIN	DATA	0F4H
P3MDOUT	DATA	09CH
PCA0CENT	DATA	09EH
PCA0CLR	DATA	09CH
PCA0CN0	DATA	0D8H
PCA0CPH0	DATA	0FCH
PCA0CPH1	DATA	0EAH
PCA0CPH2	DATA	0ECH
PCA0CPL0	DATA	0FBH
PCA0CPL1	DATA	0E9H
PCA0CPL2	DATA	0EBH
PCA0CPM0	DATA	0DAH
PCA0CPM1	DATA	0DBH
PCA0CPM2	DATA	0DCH
PCA0H	DATA	0FAH
PCA0L	DATA	0F9H
PCA0MD	DATA	0D9H
PCA0POL	DATA	096H
PCA0PWM	DATA	0F7H
PCON0	DATA	087H
PCON1	DATA	09AH
PFE0CN	DATA	0C1H
PRTDRV	DATA	0F6H
PSCTL	DATA	08FH
PSW	DATA	0D0H
REF0CN	DATA	0D1H
REG0CN	DATA	0C9H
REG1CN	DATA	0C6H
REVID	DATA	0B6H
RSTSRC	DATA	0EFH
SBCON1	DATA	094H
SBRLH1	DATA	096H
SBRLL1	DATA	095H
SBUF0	DATA	099H
SBUF1	DATA	092H
SCON0	DATA	098H
SCON1	DATA	0C8H
SFRPAGE	DATA	0A7H
SFRPGCN	DATA	0CFH
SFRSTACK	DATA	0D7H
SMB0ADM	DATA	0D6H
SMB0ADR	DATA	0D7H
SMB0CF	DATA	0C1H
SMB0CN0	DATA	0C0H
SMB0DAT	DATA	0C2H
SMB0FCN0	DATA	0C3H
SMB0FCN1	DATA	0C4H
SMB0FCT	DATA	0EFH
SMB0RXLN	DATA	0C5H
SMB0TC	DATA	0ACH
SMOD1	DATA	093H
SP	DATA	081H
SPI0CFG	DATA	0A1H
SPI0CKR	DATA	0A2H
SPI0CN0	DATA	0F8H
SPI0DAT	DATA	0A3H
SPI0FCN0	DATA	09AH
SPI0FCN1	DATA	09BH
SPI0FCT	DATA	0F7H
TCON	DATA	088H
TH0	DATA	08CH
TH1	DATA	08DH
TL0	DATA	08AH
TL1	DATA	08BH
TMOD	DATA	089H
TMR2CN0	DATA	0C8H
TMR2CN1	DATA	0FDH
TMR2H	DATA	0CDH
TMR2L	DATA	0CCH
TMR2RLH	DATA	0CBH
TMR2RLL	DATA	0CAH
TMR3CN0	DATA	091H
TMR3CN1	DATA	0FEH
TMR3H	DATA	095H
TMR3L	DATA	094H
TMR3RLH	DATA	093H
TMR3RLL	DATA	092H
TMR4CN0	DATA	098H
TMR4CN1	DATA	0FFH
TMR4H	DATA	0A5H
TMR4L	DATA	0A4H
TMR4RLH	DATA	0A3H
TMR4RLL	DATA	0A2H
UART1FCN0	DATA	09DH
UART1FCN1	DATA	0D8H
UART1FCT	DATA	0FAH
UART1LIN	DATA	09EH
USB0ADR	DATA	0AEH
USB0AEC	DATA	0B2H
USB0CDCF	DATA	0B6H
USB0CDCN	DATA	0BEH
USB0CDSTA	DATA	0BFH
USB0CF	DATA	0B5H
USB0DAT	DATA	0AFH
USB0XCN	DATA	0B3H
VDM0CN	DATA	0FFH
WDTCN	DATA	097H
XBR0	DATA	0E1H
XBR1	DATA	0E2H
XBR2	DATA	0E3H
ADC0GT	DATA	0C3H
ADC0	DATA	0BDH
ADC0LT	DATA	0C5H
DP	DATA	082H
PCA0CP0	DATA	0FBH
PCA0CP1	DATA	0E9H
PCA0CP2	DATA	0EBH
PCA0	DATA	0F9H
SBRL1	DATA	095H
TMR2	DATA	0CCH
TMR2RL	DATA	0CAH
TMR3	DATA	094H
TMR3RL	DATA	092H
TMR4	DATA	0A4H
TMR4RL	DATA	0A2H
ACC_ACC0	BIT	0E0H.0
ACC_ACC1	BIT	0E0H.1
ACC_ACC2	BIT	0E0H.2
ACC_ACC3	BIT	0E0H.3
ACC_ACC4	BIT	0E0H.4
ACC_ACC5	BIT	0E0H.5
ACC_ACC6	BIT	0E0H.6
ACC_ACC7	BIT	0E0H.7
ADC0CN0_ADCM0	BIT	0E8H.0
ADC0CN0_ADCM1	BIT	0E8H.1
ADC0CN0_ADCM2	BIT	0E8H.2
ADC0CN0_ADWINT	BIT	0E8H.3
ADC0CN0_ADBUSY	BIT	0E8H.4
ADC0CN0_ADINT	BIT	0E8H.5
ADC0CN0_ADBMEN	BIT	0E8H.6
ADC0CN0_ADEN	BIT	0E8H.7
B_B0	BIT	0F0H.0
B_B1	BIT	0F0H.1
B_B2	BIT	0F0H.2
B_B3	BIT	0F0H.3
B_B4	BIT	0F0H.4
B_B5	BIT	0F0H.5
B_B6	BIT	0F0H.6
B_B7	BIT	0F0H.7
IE_EX0	BIT	0A8H.0
IE_ET0	BIT	0A8H.1
IE_EX1	BIT	0A8H.2
IE_ET1	BIT	0A8H.3
IE_ES0	BIT	0A8H.4
IE_ET2	BIT	0A8H.5
IE_ESPI0	BIT	0A8H.6
IE_EA	BIT	0A8H.7
IP_PX0	BIT	0B8H.0
IP_PT0	BIT	0B8H.1
IP_PX1	BIT	0B8H.2
IP_PT1	BIT	0B8H.3
IP_PS0	BIT	0B8H.4
IP_PT2	BIT	0B8H.5
IP_PSPI0	BIT	0B8H.6
P0_B0	BIT	080H.0
P0_B1	BIT	080H.1
P0_B2	BIT	080H.2
P0_B3	BIT	080H.3
P0_B4	BIT	080H.4
P0_B5	BIT	080H.5
P0_B6	BIT	080H.6
P0_B7	BIT	080H.7
P1_B0	BIT	090H.0
P1_B1	BIT	090H.1
P1_B2	BIT	090H.2
P1_B3	BIT	090H.3
P1_B4	BIT	090H.4
P1_B5	BIT	090H.5
P1_B6	BIT	090H.6
P1_B7	BIT	090H.7
P2_B0	BIT	0A0H.0
P2_B1	BIT	0A0H.1
P2_B2	BIT	0A0H.2
P2_B3	BIT	0A0H.3
P3_B0	BIT	0B0H.0
P3_B1	BIT	0B0H.1
PCA0CN0_CCF0	BIT	0D8H.0
PCA0CN0_CCF1	BIT	0D8H.1
PCA0CN0_CCF2	BIT	0D8H.2
PCA0CN0_CR	BIT	0D8H.6
PCA0CN0_CF	BIT	0D8H.7
PSW_PARITY	BIT	0D0H.0
PSW_F1	BIT	0D0H.1
PSW_OV	BIT	0D0H.2
PSW_RS0	BIT	0D0H.3
PSW_RS1	BIT	0D0H.4
PSW_F0	BIT	0D0H.5
PSW_AC	BIT	0D0H.6
PSW_CY	BIT	0D0H.7
SCON0_RI	BIT	098H.0
SCON0_TI	BIT	098H.1
SCON0_RB8	BIT	098H.2
SCON0_TB8	BIT	098H.3
SCON0_REN	BIT	098H.4
SCON0_MCE	BIT	098H.5
SCON0_SMODE	BIT	098H.7
SCON1_RI	BIT	0C8H.0
SCON1_TI	BIT	0C8H.1
SCON1_RBX	BIT	0C8H.2
SCON1_TBX	BIT	0C8H.3
SCON1_REN	BIT	0C8H.4
SCON1_PERR	BIT	0C8H.6
SCON1_OVR	BIT	0C8H.7
SMB0CN0_SI	BIT	0C0H.0
SMB0CN0_ACK	BIT	0C0H.1
SMB0CN0_ARBLOST	BIT	0C0H.2
SMB0CN0_ACKRQ	BIT	0C0H.3
SMB0CN0_STO	BIT	0C0H.4
SMB0CN0_STA	BIT	0C0H.5
SMB0CN0_TXMODE	BIT	0C0H.6
SMB0CN0_MASTER	BIT	0C0H.7
SPI0CN0_SPIEN	BIT	0F8H.0
SPI0CN0_TXNF	BIT	0F8H.1
SPI0CN0_NSSMD0	BIT	0F8H.2
SPI0CN0_NSSMD1	BIT	0F8H.3
SPI0CN0_RXOVRN	BIT	0F8H.4
SPI0CN0_MODF	BIT	0F8H.5
SPI0CN0_WCOL	BIT	0F8H.6
SPI0CN0_SPIF	BIT	0F8H.7
TCON_IT0	BIT	088H.0
TCON_IE0	BIT	088H.1
TCON_IT1	BIT	088H.2
TCON_IE1	BIT	088H.3
TCON_TR0	BIT	088H.4
TCON_TF0	BIT	088H.5
TCON_TR1	BIT	088H.6
TCON_TF1	BIT	088H.7
TMR2CN0_T2XCLK0	BIT	0C8H.0
TMR2CN0_T2XCLK1	BIT	0C8H.1
TMR2CN0_TR2	BIT	0C8H.2
TMR2CN0_T2SPLIT	BIT	0C8H.3
TMR2CN0_TF2CEN	BIT	0C8H.4
TMR2CN0_TF2LEN	BIT	0C8H.5
TMR2CN0_TF2L	BIT	0C8H.6
TMR2CN0_TF2H	BIT	0C8H.7
TMR4CN0_T4XCLK0	BIT	098H.0
TMR4CN0_T4XCLK1	BIT	098H.1
TMR4CN0_TR4	BIT	098H.2
TMR4CN0_T4SPLIT	BIT	098H.3
TMR4CN0_TF4CEN	BIT	098H.4
TMR4CN0_TF4LEN	BIT	098H.5
TMR4CN0_TF4L	BIT	098H.6
TMR4CN0_TF4H	BIT	098H.7
UART1FCN1_RIE	BIT	0D8H.0
UART1FCN1_RXTO0	BIT	0D8H.1
UART1FCN1_RXTO1	BIT	0D8H.2
UART1FCN1_RFRQ	BIT	0D8H.3
UART1FCN1_TIE	BIT	0D8H.4
UART1FCN1_TXHOLD	BIT	0D8H.5
UART1FCN1_TXNF	BIT	0D8H.6
UART1FCN1_TFRQ	BIT	0D8H.7
DISP_EN	BIT	0A0H.3
?PR?SiLabs_Startup?EFM8UB1_BLINKY        SEGMENT CODE 
?PR?main?EFM8UB1_BLINKY                  SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?DT?EFM8UB1_BLINKY   SEGMENT DATA 
	EXTRN	CODE (enter_DefaultMode_from_RESET)
	EXTRN	CODE (_ChangeBlue)
	EXTRN	CODE (_ChangeRed)
	EXTRN	CODE (_ChangeGreen)
	EXTRN	CODE (_ChangeWhite)
	EXTRN	CODE (?C_STARTUP)
	PUBLIC	num
	PUBLIC	main
	PUBLIC	SiLabs_Startup

	RSEG  ?DT?EFM8UB1_BLINKY
            num:   DS   1

	RSEG  ?C_INITSEG
	DB	001H
	DB	num
	DB	000H

; //-----------------------------------------------------------------------------
; // EFM8UB1_Blinky.c
; //-----------------------------------------------------------------------------
; // Copyright 2014 Silicon Laboratories, Inc.
; // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
; //
; // Program Description:
; //
; // This program flashes the red/green/blue LED on the EFM8UB1 STK board about
; // five times a second using the interrupt handler for Timer2.
; //
; // Resources:
; //   SYSCLK - 24.5 MHz HFOSC0 / 8
; //   Timer2 - 5 Hz interrupt
; //   P1.4   - LED green
; //   P1.5   - LED blue
; //   P1.6   - LED red
; //   P2.3   - Display enable
; //
; //-----------------------------------------------------------------------------
; // How To Test: EFM8UB1 STK
; //-----------------------------------------------------------------------------
; // 1) Place the switch in "AEM" mode.
; // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
; // 3) Compile and download code to the EFM8UB1 STK board.
; //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
; //    click the Debug button in the quick menu, or press F11.
; // 4) Run the code.
; //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
; //    click the Resume button in the quick menu, or press F8.
; // 5) The RGB LED should alternate colors at approximately 5 Hz.
; //
; // Target:         EFM8UB1
; // Tool chain:     Generic
; //
; // Release 0.1 (MW, ST)
; //    - Initial Revision
; //    - 10 OCT 2014
; //
; 
; //-----------------------------------------------------------------------------
; // Includes
; //-----------------------------------------------------------------------------
; #include <SI_EFM8UB1_Register_Enums.h>
; #include <InitDevice.h>
; 
; 
; //-----------------------------------------------------------------------------
; // Pin Definitions
; //-----------------------------------------------------------------------------
; SI_SBIT (DISP_EN, SFR_P2, 3);          // Display Enable
; #define DISP_BC_DRIVEN   0             // 0 = Board Controller drives display
; #define DISP_EFM8_DRIVEN 1             // 1 = EFM8 drives display
; 
; 
; void ANYCOLORS (void);
; void LEDSLOOPG (uint8_t count);
; void LEDSLOOPR (uint8_t count);
; void LEDSLOOPB (uint8_t count);
; void LEDSLOOPW (uint8_t count);
; void _ChangeBlue(void);
; void _ChangeRed(void);
; void _ChangeGreen(void);
; void _ChangeWhite(void);
; //-----------------------------------------------------------------------------
; // SiLabs_Startup() Routine
; // ----------------------------------------------------------------------------
; // This function is called immediately after reset, before the initialization
; // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
; // useful place to disable the watchdog timer, which is enable by default
; // and may trigger before main() in some instances.
; //-----------------------------------------------------------------------------
; void SiLabs_Startup (void)

	RSEG  ?PR?SiLabs_Startup?EFM8UB1_BLINKY
SiLabs_Startup:
	USING	0
			; SOURCE LINE # 73
; {
			; SOURCE LINE # 74
;   // Disable the watchdog here
; }
			; SOURCE LINE # 76
	RET  	
; END OF SiLabs_Startup

; 
;  uint8_t num = 0;
; //-----------------------------------------------------------------------------
; // Main Routine
; //-----------------------------------------------------------------------------
; void main (void)

	RSEG  ?PR?main?EFM8UB1_BLINKY
main:
	USING	0
			; SOURCE LINE # 82
; {
			; SOURCE LINE # 83
;    enter_DefaultMode_from_RESET();
			; SOURCE LINE # 84
	LCALL	enter_DefaultMode_from_RESET
; 
;    DISP_EN = DISP_BC_DRIVEN;           // Display not driven by EFM8
			; SOURCE LINE # 86
	CLR  	DISP_EN
; 
;    IE_EA = 0;                          // Enable global interrupts
			; SOURCE LINE # 88
	CLR  	IE_EA
; 
;    //LEDSLOOPG(15);
;    //LEDSLOOPB(3);
;    //LEDSLOOPR(3);
; 
;    _ChangeRed();
			; SOURCE LINE # 94
	LCALL	_ChangeRed
;    _ChangeGreen();
			; SOURCE LINE # 95
	LCALL	_ChangeGreen
;    _ChangeBlue();
			; SOURCE LINE # 96
	LCALL	_ChangeBlue
;    _ChangeWhite();
			; SOURCE LINE # 97
	LCALL	_ChangeWhite
; 
; 
;    for(num =0; num<10; num++)
			; SOURCE LINE # 100
	MOV  	num,#00H
?C0002:
	MOV  	R7,num
	MOV  	R6,#00H
	CLR  	C
	MOV  	A,R7
	SUBB 	A,#0AH
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0003
;    {
			; SOURCE LINE # 101
; 	   _ChangeWhite();
			; SOURCE LINE # 102
	LCALL	_ChangeWhite
;    }
			; SOURCE LINE # 103
	INC  	num
	SJMP 	?C0002
?C0003:
;    for(num =0; num<10; num++)
			; SOURCE LINE # 104
	MOV  	num,#00H
?C0005:
	MOV  	R7,num
	MOV  	R6,#00H
	CLR  	C
	MOV  	A,R7
	SUBB 	A,#0AH
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0006
;    {
			; SOURCE LINE # 105
; 	   _ChangeBlue();
			; SOURCE LINE # 106
	LCALL	_ChangeBlue
;    }
			; SOURCE LINE # 107
	INC  	num
	SJMP 	?C0005
?C0006:
;    for(num =0; num<10; num++)
			; SOURCE LINE # 108
	MOV  	num,#00H
?C0008:
	MOV  	R7,num
	MOV  	R6,#00H
	CLR  	C
	MOV  	A,R7
	SUBB 	A,#0AH
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0009
;    {
			; SOURCE LINE # 109
; 	   _ChangeGreen();
			; SOURCE LINE # 110
	LCALL	_ChangeGreen
;    }
			; SOURCE LINE # 111
	INC  	num
	SJMP 	?C0008
?C0009:
;    for(num =0; num<10; num++)
			; SOURCE LINE # 112
	MOV  	num,#00H
?C0011:
	MOV  	R7,num
	MOV  	R6,#00H
	CLR  	C
	MOV  	A,R7
	SUBB 	A,#0AH
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,#080H
	JNC  	?C0014
;    {
			; SOURCE LINE # 113
; 	   _ChangeRed();
			; SOURCE LINE # 114
	LCALL	_ChangeRed
;    }
			; SOURCE LINE # 115
	INC  	num
	SJMP 	?C0011
; 
; }
			; SOURCE LINE # 117
?C0014:
	RET  	
; END OF main

	END
