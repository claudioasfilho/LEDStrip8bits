C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.60\BIN\C51.
                    -exe /Users/clfilho/SimplicityStudio/March20/LEDStrip_UB1/src/InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNI
                    -NGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(0,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Users/clfilho/SimplicityStudio/March20/L
                    -EDStrip_UB1/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.1.7//Device/shared/si8051Bas
                    -e;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.1.7//Device/EFM8UB1/inc) NOAREGS PRINT(.\s
                    -rc/InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8UB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PORTS_2_enter_DefaultMode_from_RESET();
  30   1              PBCFG_0_enter_DefaultMode_from_RESET();
  31   1              HFOSC_0_enter_DefaultMode_from_RESET();
  32   1              CIP51_0_enter_DefaultMode_from_RESET();
  33   1              CLOCK_0_enter_DefaultMode_from_RESET();
  34   1              TIMER01_0_enter_DefaultMode_from_RESET();
  35   1              TIMER16_2_enter_DefaultMode_from_RESET();
  36   1              TIMER16_3_enter_DefaultMode_from_RESET();
  37   1              TIMER16_4_enter_DefaultMode_from_RESET();
  38   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  39   1              // Restore the SFRPAGE
  40   1              SFRPAGE = SFRPAGE_save;
  41   1              // [Config Calls]$
  42   1      
  43   1      }
  44          
  45          //================================================================================
  46          // WDT_0_enter_DefaultMode_from_RESET
  47          //================================================================================
  48          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
  49   1              // $[Watchdog Timer Init Variable Declarations]
  50   1              uint32_t i;
  51   1              bool ea;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 2   

  52   1              // [Watchdog Timer Init Variable Declarations]$
  53   1      
  54   1              // $[WDTCN - Watchdog Timer Control]
  55   1              // Deprecated
  56   1              // [WDTCN - Watchdog Timer Control]$
  57   1      
  58   1              // $[WDTCN_2 - Watchdog Timer Control]
  59   1              SFRPAGE = 0x00;
  60   1      
  61   1              // Feed WDT timer before disabling (Erratum WDT_E102)
  62   1              WDTCN = 0xA5;
  63   1      
  64   1              // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  65   1              for (i = 0; i < (2 * 3062500UL) / (80000 * 3); i++) {
  66   2                      NOP();
  67   2              }
  68   1      
  69   1              // Disable WDT
  70   1              ea = IE_EA;
  71   1              IE_EA = 0;
  72   1              WDTCN = 0xDE;
  73   1              WDTCN = 0xAD;
  74   1              IE_EA = ea;
  75   1      
  76   1              // [WDTCN_2 - Watchdog Timer Control]$
  77   1      
  78   1      }
  79          
  80          //================================================================================
  81          // PORTS_0_enter_DefaultMode_from_RESET
  82          //================================================================================
  83          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
  84   1              // $[P0 - Port 0 Pin Latch]
  85   1              // [P0 - Port 0 Pin Latch]$
  86   1      
  87   1              // $[P0MDOUT - Port 0 Output Mode]
  88   1              /***********************************************************************
  89   1               - P0.0 output is open-drain
  90   1               - P0.1 output is open-drain
  91   1               - P0.2 output is open-drain
  92   1               - P0.3 output is open-drain
  93   1               - P0.4 output is push-pull
  94   1               - P0.5 output is open-drain
  95   1               - P0.6 output is open-drain
  96   1               - P0.7 output is open-drain
  97   1               ***********************************************************************/
  98   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
  99   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 100   1                              | P0MDOUT_B4__PUSH_PULL | P0MDOUT_B5__OPEN_DRAIN
 101   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
 102   1              // [P0MDOUT - Port 0 Output Mode]$
 103   1      
 104   1              // $[P0MDIN - Port 0 Input Mode]
 105   1              // [P0MDIN - Port 0 Input Mode]$
 106   1      
 107   1              // $[P0SKIP - Port 0 Skip]
 108   1              // [P0SKIP - Port 0 Skip]$
 109   1      
 110   1              // $[P0MASK - Port 0 Mask]
 111   1              // [P0MASK - Port 0 Mask]$
 112   1      
 113   1              // $[P0MAT - Port 0 Match]
 114   1              // [P0MAT - Port 0 Match]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 3   

 115   1      
 116   1      }
 117          
 118          //================================================================================
 119          // PORTS_1_enter_DefaultMode_from_RESET
 120          //================================================================================
 121          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 122   1              // $[P1 - Port 1 Pin Latch]
 123   1              // [P1 - Port 1 Pin Latch]$
 124   1      
 125   1              // $[P1MDOUT - Port 1 Output Mode]
 126   1              /***********************************************************************
 127   1               - P1.0 output is open-drain
 128   1               - P1.1 output is open-drain
 129   1               - P1.2 output is open-drain
 130   1               - P1.3 output is open-drain
 131   1               - P1.4 output is push-pull
 132   1               - P1.5 output is push-pull
 133   1               - P1.6 output is push-pull
 134   1               - P1.7 output is open-drain
 135   1               ***********************************************************************/
 136   1              P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__OPEN_DRAIN
 137   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
 138   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
 139   1                              | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__OPEN_DRAIN;
 140   1              // [P1MDOUT - Port 1 Output Mode]$
 141   1      
 142   1              // $[P1MDIN - Port 1 Input Mode]
 143   1              /***********************************************************************
 144   1               - P1.0 pin is configured for digital mode
 145   1               - P1.1 pin is configured for digital mode
 146   1               - P1.2 pin is configured for digital mode
 147   1               - P1.3 pin is configured for digital mode
 148   1               - P1.4 pin is configured for digital mode
 149   1               - P1.5 pin is configured for digital mode
 150   1               - P1.6 pin is configured for digital mode
 151   1               - P1.7 pin is configured for analog mode
 152   1               ***********************************************************************/
 153   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 154   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 155   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__ANALOG;
 156   1              // [P1MDIN - Port 1 Input Mode]$
 157   1      
 158   1              // $[P1SKIP - Port 1 Skip]
 159   1              /***********************************************************************
 160   1               - P1.0 pin is not skipped by the crossbar
 161   1               - P1.1 pin is not skipped by the crossbar
 162   1               - P1.2 pin is not skipped by the crossbar
 163   1               - P1.3 pin is not skipped by the crossbar
 164   1               - P1.4 pin is not skipped by the crossbar
 165   1               - P1.5 pin is skipped by the crossbar
 166   1               - P1.6 pin is skipped by the crossbar
 167   1               - P1.7 pin is skipped by the crossbar
 168   1               ***********************************************************************/
 169   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 170   1                              | P1SKIP_B2__NOT_SKIPPED | P1SKIP_B3__NOT_SKIPPED
 171   1                              | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__SKIPPED | P1SKIP_B6__SKIPPED
 172   1                              | P1SKIP_B7__SKIPPED;
 173   1              // [P1SKIP - Port 1 Skip]$
 174   1      
 175   1              // $[P1MASK - Port 1 Mask]
 176   1              // [P1MASK - Port 1 Mask]$
 177   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 4   

 178   1              // $[P1MAT - Port 1 Match]
 179   1              // [P1MAT - Port 1 Match]$
 180   1      
 181   1      }
 182          
 183          //================================================================================
 184          // PORTS_2_enter_DefaultMode_from_RESET
 185          //================================================================================
 186          extern void PORTS_2_enter_DefaultMode_from_RESET(void) {
 187   1              // $[P2 - Port 2 Pin Latch]
 188   1              // [P2 - Port 2 Pin Latch]$
 189   1      
 190   1              // $[P2MDOUT - Port 2 Output Mode]
 191   1              /***********************************************************************
 192   1               - P2.0 output is open-drain
 193   1               - P2.1 output is open-drain
 194   1               - P2.2 output is open-drain
 195   1               - P2.3 output is push-pull
 196   1               ***********************************************************************/
 197   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
 198   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__PUSH_PULL;
 199   1              // [P2MDOUT - Port 2 Output Mode]$
 200   1      
 201   1              // $[P2MDIN - Port 2 Input Mode]
 202   1              // [P2MDIN - Port 2 Input Mode]$
 203   1      
 204   1              // $[P2SKIP - Port 2 Skip]
 205   1              /***********************************************************************
 206   1               - P2.0 pin is not skipped by the crossbar
 207   1               - P2.1 pin is not skipped by the crossbar
 208   1               - P2.2 pin is not skipped by the crossbar
 209   1               - P2.3 pin is skipped by the crossbar
 210   1               ***********************************************************************/
 211   1              SFRPAGE = 0x20;
 212   1              P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
 213   1                              | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
 214   1              // [P2SKIP - Port 2 Skip]$
 215   1      
 216   1              // $[P2MASK - Port 2 Mask]
 217   1              // [P2MASK - Port 2 Mask]$
 218   1      
 219   1              // $[P2MAT - Port 2 Match]
 220   1              // [P2MAT - Port 2 Match]$
 221   1      
 222   1      }
 223          
 224          //================================================================================
 225          // PBCFG_0_enter_DefaultMode_from_RESET
 226          //================================================================================
 227          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 228   1              // $[XBR2 - Port I/O Crossbar 2]
 229   1              /***********************************************************************
 230   1               - Weak Pullups enabled 
 231   1               - Crossbar enabled
 232   1               - UART1 I/O unavailable at Port pin
 233   1               - UART1 RTS1 unavailable at Port pin
 234   1               - UART1 CTS1 unavailable at Port pin
 235   1               ***********************************************************************/
 236   1              SFRPAGE = 0x00;
 237   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 238   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 239   1                              | XBR2_URT1CTSE__DISABLED;
 240   1              // [XBR2 - Port I/O Crossbar 2]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 5   

 241   1      
 242   1              // $[PRTDRV - Port Drive Strength]
 243   1              // [PRTDRV - Port Drive Strength]$
 244   1      
 245   1              // $[XBR0 - Port I/O Crossbar 0]
 246   1              // [XBR0 - Port I/O Crossbar 0]$
 247   1      
 248   1              // $[XBR1 - Port I/O Crossbar 1]
 249   1              // [XBR1 - Port I/O Crossbar 1]$
 250   1      
 251   1      }
 252          
 253          //================================================================================
 254          // LFOSC_0_enter_DefaultMode_from_RESET
 255          //================================================================================
 256          extern void LFOSC_0_enter_DefaultMode_from_RESET(void) {
 257   1              // $[LFO0CN - Low Frequency Oscillator Control]
 258   1              // [LFO0CN - Low Frequency Oscillator Control]$
 259   1      
 260   1              // $[Wait for LFOSC Ready]
 261   1              // [Wait for LFOSC Ready]$
 262   1      
 263   1      }
 264          
 265          //================================================================================
 266          // TIMER01_0_enter_DefaultMode_from_RESET
 267          //================================================================================
 268          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 269   1              // $[Timer Initialization]
 270   1              //Save Timer Configuration
 271   1              uint8_t TCON_save;
 272   1              TCON_save = TCON;
 273   1              //Stop Timers
 274   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 275   1      
 276   1              // [Timer Initialization]$
 277   1      
 278   1              // $[TH0 - Timer 0 High Byte]
 279   1              // [TH0 - Timer 0 High Byte]$
 280   1      
 281   1              // $[TL0 - Timer 0 Low Byte]
 282   1              // [TL0 - Timer 0 Low Byte]$
 283   1      
 284   1              // $[TH1 - Timer 1 High Byte]
 285   1              /***********************************************************************
 286   1               - Timer 1 High Byte = 0x30
 287   1               ***********************************************************************/
 288   1              TH1 = (0x30 << TH1_TH1__SHIFT);
 289   1              // [TH1 - Timer 1 High Byte]$
 290   1      
 291   1              // $[TL1 - Timer 1 Low Byte]
 292   1              // [TL1 - Timer 1 Low Byte]$
 293   1      
 294   1              // $[Timer Restoration]
 295   1              //Restore Timer Configuration
 296   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 297   1      
 298   1              // [Timer Restoration]$
 299   1      
 300   1      }
 301          
 302          //================================================================================
 303          // TIMER16_2_enter_DefaultMode_from_RESET
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 6   

 304          //================================================================================
 305          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 306   1              // $[Timer Initialization]
 307   1              // Save Timer Configuration
 308   1              uint8_t TMR2CN0_TR2_save;
 309   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 310   1              // Stop Timer
 311   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 312   1              // [Timer Initialization]$
 313   1      
 314   1              // $[TMR2CN1 - Timer 2 Control 1]
 315   1              // [TMR2CN1 - Timer 2 Control 1]$
 316   1      
 317   1              // $[TMR2CN0 - Timer 2 Control]
 318   1              // [TMR2CN0 - Timer 2 Control]$
 319   1      
 320   1              // $[TMR2H - Timer 2 High Byte]
 321   1              // [TMR2H - Timer 2 High Byte]$
 322   1      
 323   1              // $[TMR2L - Timer 2 Low Byte]
 324   1              // [TMR2L - Timer 2 Low Byte]$
 325   1      
 326   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 327   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 328   1      
 329   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 330   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 331   1      
 332   1              // $[TMR2CN0]
 333   1              /***********************************************************************
 334   1               - Start Timer 2 running
 335   1               ***********************************************************************/
 336   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 337   1              // [TMR2CN0]$
 338   1      
 339   1              // $[Timer Restoration]
 340   1              // Restore Timer Configuration
 341   1              TMR2CN0 |= TMR2CN0_TR2_save;
 342   1              // [Timer Restoration]$
 343   1      
 344   1      }
 345          
 346          //================================================================================
 347          // TIMER16_3_enter_DefaultMode_from_RESET
 348          //================================================================================
 349          extern void TIMER16_3_enter_DefaultMode_from_RESET(void) {
 350   1              // $[Timer Initialization]
 351   1              // Save Timer Configuration
 352   1              uint8_t TMR3CN0_TR3_save;
 353   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 354   1              // Stop Timer
 355   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 356   1              // [Timer Initialization]$
 357   1      
 358   1              // $[TMR3CN1 - Timer 3 Control 1]
 359   1              // [TMR3CN1 - Timer 3 Control 1]$
 360   1      
 361   1              // $[TMR3CN0 - Timer 3 Control]
 362   1              // [TMR3CN0 - Timer 3 Control]$
 363   1      
 364   1              // $[TMR3H - Timer 3 High Byte]
 365   1              // [TMR3H - Timer 3 High Byte]$
 366   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 7   

 367   1              // $[TMR3L - Timer 3 Low Byte]
 368   1              // [TMR3L - Timer 3 Low Byte]$
 369   1      
 370   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 371   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 372   1      
 373   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 374   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 375   1      
 376   1              // $[TMR3CN0]
 377   1              // [TMR3CN0]$
 378   1      
 379   1              // $[Timer Restoration]
 380   1              // Restore Timer Configuration
 381   1              TMR3CN0 |= TMR3CN0_TR3_save;
 382   1              // [Timer Restoration]$
 383   1      
 384   1      }
 385          
 386          //================================================================================
 387          // TIMER16_4_enter_DefaultMode_from_RESET
 388          //================================================================================
 389          extern void TIMER16_4_enter_DefaultMode_from_RESET(void) {
 390   1              // $[Timer Initialization]
 391   1              // Save Timer Configuration
 392   1              uint8_t TMR4CN0_TR4_save;
 393   1              SFRPAGE = 0x10;
 394   1              TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 395   1              // Stop Timer
 396   1              TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 397   1              // [Timer Initialization]$
 398   1      
 399   1              // $[TMR4CN1 - Timer 4 Control 1]
 400   1              // [TMR4CN1 - Timer 4 Control 1]$
 401   1      
 402   1              // $[TMR4CN0 - Timer 4 Control]
 403   1              // [TMR4CN0 - Timer 4 Control]$
 404   1      
 405   1              // $[TMR4H - Timer 4 High Byte]
 406   1              // [TMR4H - Timer 4 High Byte]$
 407   1      
 408   1              // $[TMR4L - Timer 4 Low Byte]
 409   1              // [TMR4L - Timer 4 Low Byte]$
 410   1      
 411   1              // $[TMR4RLH - Timer 4 Reload High Byte]
 412   1              // [TMR4RLH - Timer 4 Reload High Byte]$
 413   1      
 414   1              // $[TMR4RLL - Timer 4 Reload Low Byte]
 415   1              // [TMR4RLL - Timer 4 Reload Low Byte]$
 416   1      
 417   1              // $[TMR4CN0]
 418   1              // [TMR4CN0]$
 419   1      
 420   1              // $[Timer Restoration]
 421   1              // Restore Timer Configuration
 422   1              TMR4CN0 |= TMR4CN0_TR4_save;
 423   1              // [Timer Restoration]$
 424   1      
 425   1      }
 426          
 427          //================================================================================
 428          // TIMER_SETUP_0_enter_DefaultMode_from_RESET
 429          //================================================================================
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 8   

 430          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 431   1              // $[CKCON0 - Clock Control 0]
 432   1              /***********************************************************************
 433   1               - System clock divided by 12
 434   1               - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 435   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 436   1               - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 437   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 438   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 439   1               - Timer 1 uses the system clock
 440   1               ***********************************************************************/
 441   1              SFRPAGE = 0x00;
 442   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_12 | CKCON0_T0M__PRESCALE
 443   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 444   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 445   1                              | CKCON0_T1M__SYSCLK;
 446   1              // [CKCON0 - Clock Control 0]$
 447   1      
 448   1              // $[CKCON1 - Clock Control 1]
 449   1              // [CKCON1 - Clock Control 1]$
 450   1      
 451   1              // $[TMOD - Timer 0/1 Mode]
 452   1              /***********************************************************************
 453   1               - Mode 0, 13-bit Counter/Timer
 454   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
 455   1               - Timer Mode
 456   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 457   1               - Timer Mode
 458   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 459   1               ***********************************************************************/
 460   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 461   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 462   1              // [TMOD - Timer 0/1 Mode]$
 463   1      
 464   1              // $[TCON - Timer 0/1 Control]
 465   1              /***********************************************************************
 466   1               - Start Timer 1 running
 467   1               ***********************************************************************/
 468   1              TCON |= TCON_TR1__RUN;
 469   1              // [TCON - Timer 0/1 Control]$
 470   1      
 471   1      }
 472          
 473          //================================================================================
 474          // INTERRUPT_0_enter_DefaultMode_from_RESET
 475          //================================================================================
 476          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 477   1              // $[EIE1 - Extended Interrupt Enable 1]
 478   1              // [EIE1 - Extended Interrupt Enable 1]$
 479   1      
 480   1              // $[EIE2 - Extended Interrupt Enable 2]
 481   1              // [EIE2 - Extended Interrupt Enable 2]$
 482   1      
 483   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 484   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 485   1      
 486   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 487   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 488   1      
 489   1              // $[EIP2 - Extended Interrupt Priority 2]
 490   1              // [EIP2 - Extended Interrupt Priority 2]$
 491   1      
 492   1              // $[EIP2H - Extended Interrupt Priority 2 High]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 9   

 493   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 494   1      
 495   1              // $[IE - Interrupt Enable]
 496   1              /***********************************************************************
 497   1               - Enable each interrupt according to its individual mask setting
 498   1               - Disable external interrupt 0
 499   1               - Disable external interrupt 1
 500   1               - Disable all SPI0 interrupts
 501   1               - Disable all Timer 0 interrupt
 502   1               - Disable all Timer 1 interrupt
 503   1               - Enable interrupt requests generated by the TF2L or TF2H flags
 504   1               - Disable UART0 interrupt
 505   1               ***********************************************************************/
 506   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 507   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 508   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 509   1              // [IE - Interrupt Enable]$
 510   1      
 511   1              // $[IP - Interrupt Priority]
 512   1              // [IP - Interrupt Priority]$
 513   1      
 514   1              // $[IPH - Interrupt Priority High]
 515   1              // [IPH - Interrupt Priority High]$
 516   1      
 517   1      }
 518          
 519          extern void HFOSC_0_enter_DefaultMode_from_RESET(void) {
 520   1              // $[HFOCN - High Frequency Oscillator Control]
 521   1              /***********************************************************************
 522   1               - Disable High Frequency Oscillator 0 
 523   1               - Force High Frequency Oscillator 1 to run
 524   1               ***********************************************************************/
 525   1              SFRPAGE = 0x10;
 526   1              HFOCN = HFOCN_HFO0EN__DISABLED | HFOCN_HFO1EN__ENABLED;
 527   1              // [HFOCN - High Frequency Oscillator Control]$
 528   1      
 529   1      }
 530          
 531          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 532   1              // $[HFOSC1 Setup]
 533   1              // Ensure SYSCLK is > 24 MHz before switching to HFOSC1
 534   1              SFRPAGE = 0x00;
 535   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 536   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 537   1                      ;
 538   1              // [HFOSC1 Setup]$
 539   1      
 540   1              // $[CLKSEL - Clock Select]
 541   1              /***********************************************************************
 542   1               - Clock derived from the Internal High Frequency Oscillator 1
 543   1               - SYSCLK is equal to selected clock source divided by 1
 544   1               ***********************************************************************/
 545   1              CLKSEL = CLKSEL_CLKSL__HFOSC1 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 546   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 547   1                      ;
 548   1              // [CLKSEL - Clock Select]$
 549   1      
 550   1      }
 551          
 552          extern void CIP51_0_enter_DefaultMode_from_RESET(void) {
 553   1              // $[PFE0CN - Prefetch Engine Control]
 554   1              /***********************************************************************
 555   1               - Enable the prefetch engine 
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/19/2020 11:21:00 PAGE 10  

 556   1               - SYSCLK < 50 MHz
 557   1               ***********************************************************************/
 558   1              PFE0CN = PFE0CN_PFEN__ENABLED | PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 559   1              // [PFE0CN - Prefetch Engine Control]$
 560   1      
 561   1      }
 562          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    304    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
